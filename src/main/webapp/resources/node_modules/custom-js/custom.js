/* show 401, 500 etc unexpected error */

function getErrorMessage(code) {
    var msg = "";
    switch (code) {
        case 500:
            msg = 'Internal Server Error';
            break;
        case 502:
            msg = 'Bad Gateway';
            break;
        case 503:
            msg = 'Service Unavailable';
            break;
        case 504:
            msg = 'Gateway Timeout';
            break;
        case 505:
            msg = 'HTTP Version Not Supported';
            break;
        case 511:
            msg = 'Network Authentication Required';
            break;
        case 400:
            msg = 'Bad Request';
            break;
        case 401:
            msg = 'Unauthorized';
            break;
        case 403:
            msg = 'Forbidden';
            break;
        case 404:
            msg = 'Not Found';
            break;
        case 405:
            msg = 'Method Not Allowed';
            break;
        default :
            msg = "Something went wrong";
    }

    return msg + '.Please contact with System Admin.'

}


/* Show server side message using dialog box*/

function showServerSideMessage(part1, part2, icn, msg) {
    var messageData = part1 + part2;
    $.dialogbox({
        type: 'msg',
        title: msg,
        icon: icn,
        content: messageData,
        btn: ['Ok'],
        call: [
            function () {
                $.dialogbox.close();
            }
        ]
    });
}


/* check and prevent dataTable multiple selection  */

function checkForMultipleRowSelect() {
    var counter = 0;
    var isSingle = false;
    $('input:checkbox.getVal').each(function () {
        var sThisVal = (this.checked ? $(this).val() : "");
        if (sThisVal) counter++;
        if (counter > 1) return false;
    });
    if (counter > 1) {
        $('input:checkbox.getVal').each(function () {
            var sThisVal = (this.checked ? $(this).val() : "");
            if (sThisVal) $(this).prop('checked', false);
        });
        companyGb = null;
        isSingle = true;
    }
    return isSingle;
}


/* DataTable select value send to global var */

function uncheckedAllCheckBox() {
    $('input:checkbox.getVal').each(function () {
        var sThisVal = (this.checked ? $(this).val() : "");
        if (sThisVal) $(this).prop('checked', false);
    });
}

/* Initialize message object */
messageResource.init({
    filePath: 'resources/message'
});


messageResource.load('configMessageForUI', function () {
});


/* image upload time validation */

function isJpg(name) {
    return name.match(/jpg$/i)
};

function isPng(name) {
    return name.match(/png$/i)
};

function isGif(name) {
    return name.match(/gif$/i)
};


/* blank check for input field */

function blankCheck(obj, name, isvalid) {
    isvalid = true;
    if (obj == null || obj.trim().length == 0) {
        $("#" + name + "Validation").text("" + name + " is required.");
        isvalid = false;
    }
    return isvalid;
}


function passwordCheck(obj, objC, name, name1, isvalid) {
    isvalid = true;
    if (!obj && isvalid == true) {
        $("#" + name + "Validation").text("" + name + " is required.");
        isvalid = false;
    }
    if (!objC && isvalid == true) {
        $("#" + name1 + "Validation").text("confirm password is required.");
        isvalid = false;
    }

    if (isvalid == true) isvalid = blankCheck(obj, name, isvalid);
    //if (!(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/g.test(obj)) && isvalid==true) {
    //    $("#" + name + "Validation").text("Minimum 8 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet and 1 Number:!");
    //    isvalid = false;
    //}
    if (objC && obj != objC && isvalid == true) {
        $("#" + name1 + "Validation").text("Password and Confirm password didn't match");
        isvalid = false;
    }
    return isvalid;

}


/* Delete row from DataTable */
function deleteDataRow(x, name) {
    var oData = $('#' + name).dataTable();
    $('#' + name).find("td:contains(" + x + ")").closest('tr').each(function () {
        oData.fnDeleteRow(this);
    });
}


/* Change nav bar Color*/
function changeNavColor() {
    var colorName = "ttt";
    $('.colorName').click(function () {
        colorName = $(this).attr('data-theme');
        $( ".colorName" ).removeClass("active" );
        $( this).addClass( "active" );
        $("#navbar-collapse").css("background-color", colorName);
        $(".navbar").css("background-color", colorName);
        localStorage.colorName = colorName;
    });
}

/* set nav bar color */
function setNavColor(obj) {
   if(obj) {
        var colorName = obj;
        $( ".active li" ).removeClass("active" );
        $("ul").find("[data-theme='" + obj + "']").addClass( "active" );
        $("#navbar-collapse").css("background-color", colorName);
        $(".navbar").css("background-color", colorName);
    }
}
